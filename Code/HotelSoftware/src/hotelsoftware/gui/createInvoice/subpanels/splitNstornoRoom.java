/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package hotelsoftware.gui.createInvoice.subpanels;

import hotelsoftware.controller.data.invoice.InvoiceData;
import hotelsoftware.controller.data.invoice.InvoiceItemData;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Collection;
import java.util.EventObject;
import java.util.LinkedList;
import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Johannes
 */
public class splitNstornoRoom extends javax.swing.JPanel
{
    /**
     * Creates new form splitNstornoRoom
     */
    private InvoiceData invoice;
    private Boolean[] selected;
    private LinkedList<JButton> buttons = new LinkedList<JButton>();

    public splitNstornoRoom(InvoiceData invoice)
    {
        this.invoice = invoice;
        selected = new Boolean[invoice.getInvoiceItemsData().size()];
        initComponents();
        initTable();
    }

    private void initTable()
    {
        jTable1.addMouseListener(new JTableButtonMouseListener(jTable1));
        //jTable1.setDefaultRenderer(JTextField.class, new );


        jTable1.setModel(new DefaultTableModel(
                (invoice.getInvoiceItemsData() == null ? new Object[50][] : getTableModel()),
                new String[]
                {
                    "Selection", "Amount", "Description", "Single price", "Total price", "Cancellation"
                })
        {
            boolean[] canEdit = new boolean[]
            {
                true, true, false, false, false, true
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit[columnIndex];
            }

            @Override
            public Class getColumnClass(int c)
            {
                return getValueAt(0, c).getClass();
            }
        });
        jTable1.getColumn("Cancellation").setCellRenderer(new JButtonEditorAndRenderer(jTable1.getDefaultRenderer(jTable1.getColumnClass(5)), jTable1.getDefaultEditor(jTable1.getColumnClass(5))));
        jTable1.getColumn("Cancellation").setCellEditor(new JButtonEditorAndRenderer(jTable1.getDefaultRenderer(jTable1.getColumnClass(5)), jTable1.getDefaultEditor(jTable1.getColumnClass(5))));


    }

    private Object[][] getTableModel()
    {
        int i = 0;

        Object[][] value = new Object[invoice.getInvoiceItemsData().size()][];

        for (InvoiceItemData data : invoice.getInvoiceItemsData())
        {
            JButton button = new JButton(new ImageIcon(getClass().getClassLoader().getResource("resources/images/rotes_x.gif")));
            button.addActionListener(getAL(i));
            buttons.add(button);
            selected[i] = true;
            value[i++] = new Object[]
            {
                new Boolean(selected[i - 1]), "", "Description", "Single price", "Total price", button
            };
        }
        return value;
    }

    private ActionListener getAL(final int i)
    {
        ActionListener al = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e)
            {
                System.out.println("Row " + i);
            }
        };
        return al;
    }
            
    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 944, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}

class JButtonEditorAndRenderer extends AbstractCellEditor implements TableCellEditor, TableCellRenderer
{
    private TableCellRenderer __defaultRenderer;
    private TableCellEditor __defaultEditor;
    private JButton button;

    public JButtonEditorAndRenderer(TableCellRenderer renderer, TableCellEditor editor)
    {
        __defaultRenderer = renderer;
        __defaultEditor = editor;
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column)
    {
        if (value instanceof JButton)
        {
            button = (JButton) value;
            if (isSelected)
            {
                button.setForeground(table.getSelectionForeground());
                button.setBackground(table.getSelectionBackground());
            }
            else
            {
                button.setForeground(table.getForeground());
                button.setBackground(UIManager.getColor("Button.background"));
            }
            return button;
        }
        else
        {
            button = null;
            return __defaultRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        }

    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value,
            boolean isSelected, int row, int column)
    {
        if (value instanceof JButton)
        {
            button = (JButton) value;
            if (isSelected)
            {
                button.setForeground(table.getSelectionForeground());
                button.setBackground(table.getSelectionBackground());
            }
            else
            {
                button.setForeground(table.getForeground());
                button.setBackground(UIManager.getColor("Button.background"));
            }
            return button;
        }
        else
        {
            button = null;
            return __defaultEditor.getTableCellEditorComponent(table, value, isSelected, row, column);
        }

    }

    @Override
    public boolean isCellEditable(EventObject ev)
    {
        return true;
    }

    @Override
    public boolean shouldSelectCell(EventObject ev)
    {
        return false;
    }

    @Override
    public Object getCellEditorValue()
    {
        return button;
    }
}

class JTableButtonMouseListener extends MouseAdapter
{
    private final JTable table;

    public JTableButtonMouseListener(JTable table)
    {
        this.table = table;
    }

    @Override
    public void mouseClicked(MouseEvent e)
    {
        int column = table.getColumnModel().getColumnIndexAtX(e.getX());
        int row = e.getY() / table.getRowHeight();

        if (row < table.getRowCount() && row >= 0 && column < table.getColumnCount() && column >= 0)
        {
            Object value = table.getValueAt(row, column);
            if (value instanceof JButton)
            {
                ((JButton) value).doClick();
            }
        }
    }
}